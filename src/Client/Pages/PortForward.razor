@page "/contexts/{Context}"
@using Port.Shared
@inject HttpClient Http

<h1>Port forwards</h1>

<p>Configured port forwards.</p>

@if (_pods == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h2>Deployments</h2>
    <table class="table">
        <thead>
            <tr>
                <th>@nameof(Deployment.Namespace)</th>
                <th>@nameof(Deployment.Name)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var deployment in _deployments)
            {
                <tr>
                    <td>@deployment.Namespace</td>
                    <td>@deployment.Name</td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Pods</h2>
    <table class="table">
        <thead>
            <tr>
                <th>@nameof(Pod.Namespace)</th>
                <th>@nameof(Pod.Name)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var pod in _pods)
            {
                <tr>
                    <td>@pod.Namespace</td>
                    <td>@pod.Name</td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Services</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Namespace</th>
                <th>Service</th>
                <th>Pod</th>
                <th>Container port</th>
                <th>Protocol type</th>
                <th>Host port</th>
                <th>Enable / Disable</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var service in _services)
            {
                var renderService = true;
                @foreach (var pod in _pods.ThatHostsService(service))
                {
                    var renderPod = true;
                    @foreach (var port in service.Ports)
                    {
                        var portForward = new global::Port.Shared.PortForward(
                            service.Namespace, 
                            pod.Name, 
                            service.Name, 
                            port.ProtocolType, 
                            port.Number);
                        <tr>
                            <td class="@(renderService ? "" : "no-borders")">@(renderService ? portForward.Namespace : "")</td>
                            <td class="@(renderService ? "" : "no-borders")">@(renderService ? portForward.Service : "")</td>
                            <td class="@(renderPod ? "" : "no-borders")">@(renderPod ? portForward.Pod : "")</td>
                            <td>@portForward.PodPort</td>
                            <td>@portForward.ProtocolType</td>
                            <td>
                                <MatTextField TValue="int?" @bind-Value="@portForward.LocalPort" />
                            </td>
                            <td>
                                <MatSlideToggle TValue="bool" ValueChanged="@(enable => ChangePortForwardAsync(portForward, enable))" />
                            </td>
                        </tr>
                        renderPod = false;
                        renderService = false;
                    }
                }
            }
        </tbody>
    </table>
}

@code
{
    private Deployment[] _deployments = new Deployment[0];
    private Pod[] _pods = new Pod[0];
    private Service[] _services = new Service[0];

    [Parameter]
    public string Context { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        _deployments = await Http.GetFromNewtonsoftJsonAsync<Deployment[]>($"Deployment/{Context}");
        _pods = await Http.GetFromNewtonsoftJsonAsync<Pod[]>($"Pod/{Context}");
        _services = await Http.GetFromNewtonsoftJsonAsync<Service[]>($"Service/{Context}");
    }

    private async Task ChangePortForwardAsync(
        global::Port.Shared.PortForward portForward,
        bool enable)
    {
        if (enable)
        {
            await Http.PostAsJsonAsync($"Service/{Context}/portforward", portForward);
        }
    }
}