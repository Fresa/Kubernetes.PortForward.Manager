@page "/contexts/{Context}"
@using Port.Shared
@inject HttpClient Http

<h1>Port forwards</h1>

<p>Configured port forwards.</p>

@if (_pods == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <h2>Deployments</h2>
    <table class="table">
        <thead>
        <tr>
            <th>@nameof(Deployment.Namespace)</th>
            <th>@nameof(Deployment.Name)</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var deployment in _deployments)
        {
            <tr>
                <td>@deployment.Namespace</td>
                <td>@deployment.Name</td>
            </tr>
        }
        </tbody>
    </table>

    <h2>Pods</h2>
    <table class="table">
        <thead>
        <tr>
            <th>@nameof(Pod.Namespace)</th>
            <th>@nameof(Pod.Name)</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var pod in _pods)
        {
            <tr>
                <td>@pod.Namespace</td>
                <td>@pod.Name</td>
            </tr>
        }
        </tbody>
    </table>

    <h2>Services</h2>
    <table class="table">
        <thead>
            <tr>
                <th>Namespace</th>
                <th>Service</th>
                <th>Pod</th>
                <th>Container port</th>
                <th>Protocol type</th>
                <th>Host port</th>
                <th>Enable / Disable</th>
            </tr>
        </thead>
        <tbody>
        @foreach (var service in _portForwards.GroupBy(forward => $"{forward.Namespace}/{forward.Service}"))
        {
            var firstService = true;
            @foreach (var pod in service.GroupBy(forward => $"{forward.Namespace}/{forward.Pod}"))
            {
                var firstPod = true;
                @foreach (var portForward in pod)
                {
                    <tr>
                        <td class="@(firstService ? "" : "no-borders")">@(firstService ? portForward.Namespace : "")</td>
                        <td class="@(firstService ? "" : "no-borders")">@(firstService ? portForward.Service : "")</td>
                        <td class="@(firstPod ? "" : "no-borders")">@(firstPod ? portForward.Pod : "")</td>
                        <td>@portForward.PodPort</td>
                        <td>@portForward.ProtocolType</td>
                        <td>
                            <MatTextField TValue="int?" @bind-Value="@portForward.LocalPort" />
                        </td>
                        <td>
                            <MatSlideToggle TValue="bool" ValueChanged="@(enable => ChangePortForwardAsync(portForward, enable))" />
                        </td>
                    </tr>
                    firstPod = false;
                    firstService = false;
                }
            }
        }
        </tbody>
    </table>
}

@code
{
    private Deployment[] _deployments = new Deployment[0];
    private Pod[] _pods = new Pod[0];

    private IEnumerable<global::Port.Shared.PortForward> _portForwards = Enumerable.Empty<global::Port.Shared.PortForward>();

    [Parameter]
    public string Context { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        _deployments = await Http.GetFromNewtonsoftJsonAsync<Deployment[]>($"Deployment/{Context}");
        _pods = await Http.GetFromNewtonsoftJsonAsync<Pod[]>($"Pod/{Context}");

        _portForwards = (await Http.GetFromNewtonsoftJsonAsync<Service[]>($"Service/{Context}"))
            .SelectMany(service =>
                service.Ports
                    .SelectMany(port =>
                        _pods.Where(pod =>
                            service.Selectors.Any(pair =>
                                pod.Labels.Any(valuePair =>
                                    valuePair.Key == pair.Key &&
                                    valuePair.Value == pair.Value)))
                            .Select(pod => new global::Port.Shared.PortForward
                                (
                                @namespace: service.Namespace,
                                service: service.Name,
                                pod: pod.Name,
                                protocolType: port.ProtocolType,
                                podPort: port.Number
                                ))));
    }

    private async Task ChangePortForwardAsync(
        global::Port.Shared.PortForward portForward,
        bool enable)
    {
        if (enable)
        {
            await Http.PostAsJsonAsync($"Service/{Context}/portforward", portForward);
        }
    }
}