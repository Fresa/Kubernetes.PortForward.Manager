@using Port.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div class="top-row pl-4 navbar navbar-dark">
    <span>@_location</span>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

@if (_contexts == null)
{
    <p>
        <em>Loading contexts...</em>
    </p>
}
else
{
    <div class="@NavMenuCssClass">
        <ul class="nav flex-column">
            @foreach (var context in _contexts)
            {
                <li class="nav-item px-3">
                    <NavLink class="nav-link"
                             href="@($"contexts/{context.Name}")"
                             Match="NavLinkMatch.All">
                        <span>@context.Name</span>
                    </NavLink>
                </li>
            }
        </ul>
    </div>
}

@code
{
    private bool _collapseContextMenu = true;
    private Context[] _contexts = new Context[0];
    private string _location = "";

    private string? NavMenuCssClass => _collapseContextMenu ? "collapse" : null;

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += (
            sender,
            args) =>
        {
            var positionOfLastSegment = args.Location.LastIndexOf('/');
            _location = positionOfLastSegment >= 0 ? 
                args.Location.Substring(positionOfLastSegment + 1) 
                : "";
            StateHasChanged();
        };

        _contexts = await Http.GetFromNewtonsoftJsonAsync<Context[]>("Context")
            .ConfigureAwait(false);
    }

    private void ToggleNavMenu()
    {
        _collapseContextMenu = !_collapseContextMenu;
    }
}